import telebot
from googletrans import Translator
from keyboards import generate_language, generate_back
from configs import get_key, LANGUAGES
import sqlite3

TOKEN = '5433879505:AAEFhq75gSvL-MfdPzQTL3vqfQFDcB6J1N8'
bot = telebot.TeleBot(TOKEN)


@bot.message_handler(commands=['start', 'help', 'history'])
def start(message):
    chat_id = message.chat.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name if message.from_user.last_name else ''
    if message.text == '/start':
        bot.send_message(chat_id, f'''–ü—Ä–∏–≤–µ—Ç {first_name} {last_name}.
    –Ø —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫. –ü–æ–º–æ–≥—É —Ç–µ–±–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–∞ –∏ —Ç–µ–∫—Å—Ç–∞ üòâüòÅ''')
        start_translate(message)
        # bot.send_sticker(chat_id, 'CAACAgIAAxkBAAEFgopi8h3koxFzrbqyG0SCJHGS0AwPiAACFg4AAi_AIEl3vjnIA6NjwikE')
    elif message.text == '/help':
        bot.send_message(chat_id, f'''–≠—Ç–æ—Ç –±–æ—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª—è –≤ —É—á–µ–±–Ω—ã—Ö —Ü–µ–ª—è—Ö –≤ —É—á–µ–±–Ω–æ–º —Ü–µ–Ω—Ç—Ä–µ PROWEB.
–ü—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞ –Ω–∏–∫—Ç–æ –∏–∑ —É—á–µ–Ω–∏–∫–æ–≤ –Ω–µ –ø–æ—Å—Ç—Ä–∞–¥–∞–ª. –≠—Ç–æ—Ç —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–ª—Å—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
https://t.me/yakhyayeff_13''', reply_markup=generate_back())
        # bot.send_sticker(chat_id, 'CAACAgIAAxkBAAEFgzpi8nsF193870v6sxHG7782pQUe2gAC6xQAAgthIEmm4YYOfjs9jCkE')
    elif message.text == '/history':
        return_history(message)


def return_history(message):
    chat_id = message.chat.id

    database = sqlite3.connect('translator.db')
    cursor = database.cursor()

    cursor.execute('''
SELECT from_lang, to_lang, original_text, translated_text
FROM history
WHERE telegram_id = ?    
''', (chat_id, ))

    history = cursor.fetchall()
    print(history)
    history = history[::-1]
    i = 0
    text = ''
    for from_lang, to_lang, org_text, tr_text in history[:5]:
        i += 1
        text += f'''{i}. –í—ã –ø–µ—Ä–µ–≤–µ–ª–∏
–° —è–∑—ã–∫–∞: {from_lang}
–ù–∞ —è–∑—ã–∫: {to_lang}
–¢–µ–∫—Å—Ç: {org_text}
–ë–æ—Ç –ø–µ—Ä–µ–≤–µ–ª: {tr_text}\n'''

    bot.send_message(chat_id, text, reply_markup=generate_back())


@bot.message_handler(func=lambda message: message.text in '–ù–∞–∑–∞–¥')
def return_back(message):
    start_translate(message)


def start_translate(message):
    chat_id = message.chat.id
    msg = bot.send_message(chat_id, f'–° –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ?', reply_markup=generate_language())
    bot.register_next_step_handler(msg, second_lang)

@bot.message_handler(func=lambda message: message.text in LANGUAGES.values())
def second_lang(message):
    if message.text in ['/start', '/help', '/history']:
        start(message)
    else:
        src = message.text
        chat_id = message.chat.id
        msg = bot.send_message(chat_id, f'–ù–∞ –∫–∞–∫–æ–π —è–∑—ã–∫ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ?', reply_markup=generate_language())
        bot.register_next_step_handler(msg, give_me_text, src)


@bot.message_handler(func=lambda message: message.text in LANGUAGES.values())
def give_me_text(message, src):
    if message.text in ['/start', '/help', '/history']:
        start(message)
    else:
        chat_id = message.chat.id
        dest = message.text
        msg = bot.send_message(chat_id, f'–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: ')
        bot.register_next_step_handler(msg, translate, src, dest)


def translate(message, src, dest):
    if message.text in ['/start', '/help', '/history']:
        start(message)
    else:
        chat_id = message.chat.id
        text = message.text
        translator = Translator()
        texttt = translator.translate(text=text, src=get_key(src), dest=get_key(dest)).pronunciation if translator.translate(text=text, src=get_key(src), dest=get_key(dest)) else ''
        print(texttt)
        tr_text = translator.translate(text=text, src=get_key(src), dest=get_key(dest)).text

        database = sqlite3.connect('translator.db')
        cursor = database.cursor()

        cursor.execute('''
    INSERT INTO history(telegram_id, from_lang, to_lang, original_text, translated_text)
    VALUES (?,?,?,?,?)
    ''', (chat_id, src, dest, text, tr_text))
        database.commit()
        database.close()
        bot.send_message(chat_id, f'''{tr_text}
    {texttt}''')
        start_translate(message)


bot.polling(none_stop=True)
